# PostgreSQL: the database persistence layer where metadata is stored
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pg
  labels:
    app.kubernetes.io/component: pg
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: pg
  template:
    metadata:
      labels:
        app.kubernetes.io/component: pg
    spec:
      containers:
        - name: pg
          image: "postgres:11"
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PASSWORD
            value: '123'
          - name: POSTGRES_DB
            value: prefect
          volumeMounts:
            - name: vol
              mountPath: /var/lib/postgresql/data
      volumes:
      - name: vol
        hostPath:
          path: /home/levi_leal/workspace/lime-energy/direct-intel-infra/.local/data
---
apiVersion: v1
kind: Service
metadata:
  name: pg
  labels:
    app.kubernetes.io/component: pg
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: postgres
      protocol: TCP
      name: postgres
  selector:
    app.kubernetes.io/component: pg
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hasura
  labels:
    app.kubernetes.io/component: hasura
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: hasura
  template:
    metadata:
      labels:
        app.kubernetes.io/component: hasura
    spec:
      containers:
        - name: hasura
          image: "hasura/graphql-engine:v1.3.0"
          command:
            - "graphql-engine"
            - "serve"
          env:
          - name: HASURA_GRAPHQL_DATABASE_URL
            value: postgres://postgres@pg:5432/prefect
          - name: PGPASSWORD
            value: '123'
          - name: HASURA_GRAPHQL_ENABLE_CONSOLE
            value: "true"
          - name: HASURA_GRAPHQL_SERVER_PORT
            value: "3000"
          - name: HASURA_GRAPHQL_QUERY_PLAN_CACHE_SIZE
            value: '100'
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
---
apiVersion: v1
kind: Service
metadata:
  name: hasura
  labels:
    app.kubernetes.io/component: hasura
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: hasura
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: graphql
  labels:
    app.kubernetes.io/component: graphql
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: graphql
  template:
    metadata:
      labels:
        app.kubernetes.io/component: graphql
    spec:
      initContainers:
        - name: db-upgrade
          image: prefecthq/server
          command:
            - "bash"
            - "-c"
            - "/usr/local/bin/prefect-server database upgrade --yes"
          env:
            - name: PREFECT_SERVER__DATABASE__CONNECTION_URL
              value: postgres://postgres@pg:5432/prefect
            - name: PGPASSWORD
              value: '123'
            - name: PREFECT_SERVER__HASURA__HOST
              value: 'hasura'
      containers:
        - name: graphql
          image: prefecthq/server
          command:
            - bash
            - "-c"
            - "python src/prefect_server/services/graphql/server.py"
          env:
            - name: PREFECT_SERVER_DB_CMD
              value: "echo 'DATABASE MIGRATIONS SKIPPED'"
            - name: PREFECT_SERVER__DATABASE__CONNECTION_URL
              value: postgres://postgres@pg:5432/prefect
            - name: PGPASSWORD
              value: '123'
            - name: PREFECT_SERVER__HASURA__HOST
              value: 'hasura'
          ports:
            - name: http
              containerPort: 4201
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
---
apiVersion: v1
kind: Service
metadata:
  name: graphql
  labels:
    app.kubernetes.io/component: graphql
spec:
  type: ClusterIP
  ports:
    - port: 4201
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: graphql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: towel
  labels:
    app.kubernetes.io/component: towel
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: towel
  template:
    metadata:
      labels:
        app.kubernetes.io/component: towel
    spec:
      containers:
        - name: towel
          image: prefecthq/server
          command:
            - python
            - src/prefect_server/services/towel/__main__.py
          env:
            - name: PREFECT_SERVER__HASURA__HOST
              value: 'hasura'
            - name: PGPASSWORD
              value: '123'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apollo
  labels:
    app.kubernetes.io/component: apollo
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: apollo
  template:
    metadata:
      labels:
        app.kubernetes.io/component: apollo
    spec:
      containers:
        - name: apollo
          image: prefecthq/apollo
          command:
            - bash
            - "-c"
            - "/apollo/post-start.sh && npm run serve"
          env:
            - name: HASURA_API_URL
              value: http://hasura:3000/v1alpha1/graphql
            - name: PREFECT_API_URL
              value: http://graphql:4201/graphql/
            - name: PREFECT_API_HEALTH_URL
              value: http://graphql:4201/health
            - name: GRAPHQL_SERVICE_HOST
              value: http://graphql
            - name: GRAPHQL_SERVICE_PORT
              value: "4201"
          ports:
            - name: http
              containerPort: 4200
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /.well-known/apollo/server-health
              port: http
          readinessProbe:
            httpGet:
              path: /.well-known/apollo/server-health
              port: http
---
apiVersion: v1
kind: Service
metadata:
  name: apollo
  labels:
    app.kubernetes.io/component: apollo
spec:
  type: ClusterIP
  ports:
    - port: 4200
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: apollo
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: apollo
  labels:
    app.kubernetes.io/component: apollo
spec:
  rules:
    - host: apollo.local.com
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              serviceName: apollo
              servicePort: 4200
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  labels:
    app.kubernetes.io/component: ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: ui
  template:
    metadata:
      labels:
        app.kubernetes.io/component: ui
    spec:
      containers:
        - name: ui
          image: prefecthq/ui
          command:
            - "/intercept.sh"
          env:
            - name: PREFECT_SERVER__APOLLO_URL
              value: http://apollo.local.com/graphql
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
---
apiVersion: v1
kind: Service
metadata:
  name: ui
  labels:
    app.kubernetes.io/component: ui
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: ui
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ui
  labels:
    app.kubernetes.io/component: ui
spec:
  rules:
    - host: ui.local.com
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              serviceName: ui
              servicePort: 8080
---
apiVersion: v1
kind: Namespace
metadata:
  name: agent
  labels:
    app.kubernetes.io/name: agent
    app.kubernetes.io/instance: agent
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent
  labels:
    app.kubernetes.io/component: agent
  namespace: agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: agent
  template:
    metadata:
      labels:
        app.kubernetes.io/component: agent
    spec:
      containers:
      - name: agent
        image: prefecthq/prefect
        command:
          - bash
          - "-c"
          - "prefect agent kubernetes start"
        env:
          - name: PREFECT__CLOUD__API
            value: http://apollo.default:4200/graphql
          - name: NAMESPACE
            value: agent
          - name: PREFECT__CLOUD__AGENT__LABELS
            value: '["default"]'
          - name: PREFECT__BACKEND
            value: server
          - name: PREFECT__CLOUD__AGENT__AGENT_ADDRESS
            value: http://0.0.0.0:8080
        livenessProbe:
          failureThreshold: 2
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 40
          periodSeconds: 40
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: agent-role
  labels:
    app.kubernetes.io/component: agent-role
  namespace: agent
rules:
- apiGroups:
  - batch
  - extensions
  resources:
  - jobs
  - jobs/status
  verbs:
  - '*'
- apiGroups:
  - ''
  resources:
  - pods
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: agent-role-binding
  labels:
    app.kubernetes.io/component: agent-role-binding
  namespace: agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: agent-role
subjects:
- kind: ServiceAccount
  name: default
